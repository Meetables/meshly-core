openapi: 3.0.3 
info:
  title: meshly-core API
  version: '1.0.0'
  description: |
    The powerful and extensive backend making it easy to create Social Networks
externalDocs:
  description: Meetables GitHub
  url: https://github.com/Meetables
servers:
  - url: https://localhost:3000/
tags:
  - name: Authentication
    description: Auth stuff
  - name: Profile
    description: User details
  - name: Discover
    description: Socialize
  - name: Extensions
    description: Core features of meetables
  - name: Admin
    description: Administration of meetables data
paths:
  /api/v1/auth/signup:
    post:
      tags:
        - Authentication
      summary: Sign up
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        201:
          description: Successful signup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        400:
          description: Missing fields or wrong format
        409:
          description: Username or email already exists
        500:
          description: Internal server error

  /api/v1/auth/setup2fa:
    post:
      tags:
        - Authentication
      summary: setup 2fa with verification app
      parameters:
        - in: cookie
          name: jwt-meshlycore
          required: true
          schema:
            type: string
          description: JWT token stored in "jwt-meshlycore" cookie
      responses:
        201:
          description: 2FA setup successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setup2faResponse' #!
        404:
          description: User not found
        500:
          description: Internal server error

  /api/v1/auth/confirmation:
    post:
      tags:
        - Authentication
      summary: Email confirmation
      parameters:
        - name: token
          in: query
          required: true
          description: JWT token for email confirmation
          schema:
            type: string
      responses:
        200:
          description: Email confirmed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmationRequestResponse'
        400:
          description: Problem with the token / already confirmed
        500:
          description: Internal server error

  /api/v1/auth/verifyBasicCredentials:
    post:
      tags:
        - Authentication
      summary: Verify basic credentials (username or email and password)
      requestBody:
        description: Basic credentials for verification
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyBasicCredentialsRequest'
      responses:
        200:
          description: 2FA enabled, verification not required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyBasicCredentialsResponse2faEnabled'
        202:
          description: 2FA disabled, verification required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyBasicCredentialsResponse2faDisabled'
        400:
          description: username/email and password are required
        404:
          description: User not found / Invalid credentials
        500:
          description: Internal server error

  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: Login
      requestBody:
        description: Login data
        required: true
        content:
          application/json:    
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: Missing fields (might include verification code)
        401:
          description: Unauthorized - Invalid verification code
        403:
          description: Email is not confirmed
        404:
          description: Incorrect credentials
        500:
          description: Internal server error

  /api/v1/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      parameters:
        - in: cookie
          name: jwt-meshlycore
          required: true
          schema:
            type: string
          description: JWT token stored in "jwt-meshlycore" cookie
      responses:
        204:
          description: Successful logout (deletes the JWT cookie)
        500:
          description: Internal server error

  /api/v1/auth/resetPassword:
    post:
      tags:
        - Authentication
      summary: Reset password
      requestBody:
        description: Request to reset the password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      parameters:
        - in: cookie
          name: jwt-meshlycore
          required: true
          schema:
            type: string
          description: JWT token stored in "jwt-meshlycore" cookie
      responses:
        200:
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponse'
        400:
          description: Invalid request data.
        404:
          description: User not found.
        500:
          description: Internal server error.

  /api/v1/auth/test:
    get:
      tags:
        - Authentication
      summary: Test endpoint for authentication
      parameters:
        - in: cookie
          name: jwt-meshlycore
          required: true
          schema:
            type: string
          description: JWT token stored in "jwt-meshlycore" cookie
      responses:
        200:
          description: Auth test successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestAuthResponse'
        401:
          description: Unauthorized - Missing or invalid JWT cookie
        500:
          description: Internal server error


  /api/v1/discover/tags:
    get:
      tags:
        - Discover
      summary: Get all tags from the database
      description: |
        Protected endpoint which requires the 'jwt-meshlycore' cookie with a valid token.
        The JWT is verified using middleware before accessing this endpoint.
      security:
        - jwtCookie: []
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
        401:
          description: Unauthorized
        404:
          description: User not found
        500:
          description: Internal server error
  
  /api/v1/discover/search:
   get:
    tags:
      - Discover
    summary: Search for users by query string
    description: |
      Searches users based on a query matching username, display name, email, profile description, or tags.
      Protected endpoint which requires the 'jwt-meshlycore' cookie with a valid token.
    security:
      - jwtCookie: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              query:
                type: string
                description: The search query string.
                example: "john"
              maxResults:
                type: integer
                minimum: 1
                description: Optional maximum number of results to return.
            required:
              - query
    responses:
      200:
        description: Users matching the search query
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                users:
                  type: array
                  items:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                      username:
                        type: string
                      displayName:
                        type: string
                      profileDescription:
                        type: string
                      profileTags:
                        type: array
                        items:
                          type: string
      400:
        description: Invalid query input
      401:
        description: Unauthorized
      404:
        description: No users matching the query
      500:
        description: Internal server error


  /api/v1/discover/profile:
    get:
      tags:
        - Discover
      summary: Get Public Profile Data
      description: |
        Protected endpoint for retrieving public profile data by username.  
        Requires the 'jwt-meshlycore' cookie with a valid token.  
        Returns the public profile information (username, displayName, profileDescription, profileTags) for the given username.
      security:
        - jwtCookie: []
      requestBody:
        description: Request containing the username whose public profile data is needed.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
                  example: "johnDoe"
      responses:
        200:
          description: Public profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverProfileResponse'
        400:
          description: Username is required
        401:
          description: Unauthorized - Missing or invalid JWT cookie
        404:
          description: User not found
        500:
          description: Internal server error
  
  /api/v1/discover/user-suggestions:
    get:
      tags:
        - Discover
      summary: Get suggestions for other user profiles to socialize with.
      description: |
        Long-term suggestions for users with matching tags. The matching score is calculated
        by the number of overlapping tags.
      requestBody:
        required: true
        content:
          application/json:    
            schema:
              $ref: '#/components/schemas/GetUserSuggestionsRequest'   
      security:
        - jwtCookie: []
      responses:
        200:
          description: List of recommendations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverUserSuggestionResponse'
        401:
          description: Unauthorized - Missing or invalid JWT cookie
        404:
          description: User not found
        500:
          description: Internal Server error

  /api/v1/discover/profile-picture:
    get:
      tags:
        - Discover
      summary: Get user profile picture
      description: |
        Retrieves a user's profile picture from storage.  
        If no userId is provided, returns the authenticated user's profile picture.  
        If userId is provided, returns the specified user's profile picture.  
        Requires authentication via JWT cookie.
      security:
        - jwtCookie: []
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: false
          description: |
            The ID of the user whose profile picture to retrieve.  
            If not provided, returns the authenticated user's profile picture.
          example: "60d5ec49f1b2c8b1f8e4e123"
        - in: query
          name: username
          schema:
            type: string
          required: false
          description: |
            The ID of the user whose profile picture to retrieve.  
            If not provided, returns the authenticated user's profile picture.
          example: "testuser"
      responses:
        '200':
          description: Profile picture retrieved successfully
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
          headers:
            Content-Type:
              description: MIME type of the image
              schema:
                type: string
                example: "image/jpeg"
            Content-Length:
              description: Size of the image in bytes
              schema:
                type: integer
                example: 2048576
        '400':
          description: Bad request - Missing userId when not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Missing userId"
        '401':
          description: Unauthorized - Missing or invalid JWT cookie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Profile picture not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Profile picture not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Internal server error"

  /api/v1/profile/me:
    get:
      summary: get user data
      tags:
        - Profile
      security:
        - jwtCookie: []
      responses:
        200:
          description: Successful retrieval of authenticated user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileMeResponse'
        401:
          description: Unauthorized - Missing or invalid JWT
        404:
          description: User not found
        500:
          description: Internal server error
  /api/v1/profile/public-profile:
    get:
      summary: get public profile data
      tags:
        - Profile
      security:
        - jwtCookie: []
      responses:
        200:
          description: User onboarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProfileResponse'
        401:
          description: Unauthorized - Missing or invalid JWT
        404:
          description: User not found
        500:
          description: Internal server error
  /api/v1/profile/onboarding:
    post:
      summary: Onboard user
      description: |
        This endpoint allows onboarding a user by setting their display name, tags, and profile description.  
        Requires a valid JWT cookie (`jwt-meshlycore`).  
        A user can only be onboarded once — if profile data already exists, this will return a 409.
      tags:
        - Profile
      security:
        - jwtCookie: []
      parameters:
        - name: override
          in: query
          description: If set to `true`, allows overriding an already onboarded profile
          required: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardUserRequest'
      responses:
        204:
          description: User onboarded successfully
        400:
          description: Missing or invalid fields
        409:
          description: User already onboarded
        500:
          description: Internal server error

  /api/v1/profile/update-profile:
    post:
      summary: Update user profile
      description: |
        Updates the authenticated user's public profile data including profile tags and description.  
        Requires a valid JWT cookie (`jwt-meshlycore`).  
        Both profileTagIds and profileDescription are required fields.
      tags:
        - Profile
      security:
        - jwtCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        204:
          description: Profile updated successfully
        400:
          description: Missing or invalid fields - All fields are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "All fields are required"
        401:
          description: Unauthorized - Missing or invalid JWT cookie
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    description: Error details

  /api/v1/profile/ignore-profile:
    post:
      tags:
        - Profile
      summary: Ignore a suggested profile
      description: |
        Protected endpoint to ignore a suggested user profile.  
        Requires a valid 'jwt-meshlycore' cookie.  
        The specified user will be added to the list of ignored recommendations.
      security:
        - jwtCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameDto'
      responses:
        204:
          description: Profile successfully ignored
        400:
          description: Username missing
        401:
          description: Unauthorized - Missing or invalid JWT cookie
        404:
          description: User not found
        500:
          description: Internal server error

  /api/v1/profile/create-story:
    post:
      tags:
        - Profile
      summary: Create a new story
      description: |
        Protected endpoint to create a new story.  
        Requires a valid 'jwt-meshlycore' cookie.  
        The story will be created and associated with the authenticated user.
      security:
        - jwtCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                title:
                  type: string
                  example: "My First Story"
                content:
                  type: string
                  example: "This is the content of my first story."
      responses:
        '200':
          description: Story created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Story has been created successfully.
        '400':
          description: Bad request - Missing or invalid fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Missing or invalid JWT cookie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/profile/send-friend-request:
    post:
      tags:
        - Profile
      summary: Send a friend request
      description: |
        Protected endpoint to send a friend request to another user.  
        Requires a valid 'jwt-meshlycore' cookie.  
        The friend request will be sent to the specified username.
      security:
        - jwtCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameDto'
      responses:
        204:
          description: Friend request sent successfully
        400:
          description: Username missing or invalid
        401:
          description: Unauthorized - Missing or invalid JWT cookie
        404:
          description: User not found
        409:
          description: Already friends or already sent friend request
        418:
          description: Don't be friend with yourself!
        500:
          description: Internal server error

  /api/v1/profile/respond-to-friend-request:
    post:
      tags:
        - Profile
      summary: Respond to a friend request
      description: |
        Protected endpoint to respond to a friend request.  
        Requires a valid 'jwt-meshlycore' cookie.  
        The response will be sent to the specified username.
      security:
        - jwtCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RespondToFriendRequestRequest'
      responses:
        204:
          description: Friend request response sent successfully, notification sent to target user
        400:
          description: Bad request - Missing or invalid fields
        401:
          description: Unauthorized - Missing or invalid JWT cookie
        404:
          description: User not found or no pending friend requests
        500:
          description: Internal server error

  /api/v1/profile/friend-requests:
    get:
      tags:
        - Profile
      summary: Get pending friend requests associated with the authenticated user
      description: |
        Protected endpoint to retrieve pending friend requests for the authenticated user.  
        Requires a valid 'jwt-meshlycore' cookie.
      security:
        - jwtCookie: []
      responses:
        200:
          description: Pending friend requests retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestsResponse'
        401:
          description: Unauthorized - Missing or invalid JWT cookie
        404:
          description: User not found
        500:
          description: Internal server error

  /api/v1/profile/notifications:
    get:
      tags:
        - Profile
      summary: Get notifications
      description: |
        Protected endpoint to retrieve notifications for the authenticated user.  
        Requires a valid 'jwt-meshlycore' cookie.
      security:
        - jwtCookie: []
      responses:
        200:
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsResponse'
        401:
          description: Unauthorized - Missing or invalid JWT cookie
        404:
          description: User not found
        500:
          description: Internal server error

  /api/v1/profile/upload-profile-pic:
    post:
      tags:
        - Profile
      summary: Upload user profile picture
      description: |
        Protected endpoint to upload a profile picture for the authenticated user.  
        Requires a valid 'jwt-meshlycore' cookie.  
        Accepts image files and uploads them to the file storage backend.
        The uploaded file replaces any existing profile picture.
      security:
        - jwtCookie: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - profilePicture
              properties:
                profilePicture:
                  type: string
                  format: binary
                  description: Image file for the profile picture
      responses:
        '200':
          description: Profile picture uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile picture uploaded"
                  key:
                    type: string
                    example: "profile-pictures/60d5ec49f1b2c8b1f8e4e123"
                    description: Storage key for the uploaded file
                  url:
                    type: string
                    example: "https://meetables-api-endpoint/api/v1/discover/profile-picture?userId=60d5ec49f1b2c8b1f8e4e123"
                    description: Public URL to access the uploaded profile picture
        '400':
          description: Bad request - Missing file or user ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Missing file or user ID"
        '401':
          description: Unauthorized - Missing or invalid JWT cookie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Internal server error"

  /api/v1/extensions/get-availability:
    get:
      tags:
        - Extensions
      summary: Get user's weekly availability
      description: |
        Retrieves the availability time ranges for each day of the week as set by the user.  
        Requires a valid 'jwt-meshlycore' cookie.
      security:
        - jwtCookie: []
      responses:
        200:
          description: Availability retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  availability:
                    type: object
                    properties:
                      mon:
                        type: string
                        example: "12:00-21:00"
                      tue:
                        type: string
                        example: "12:00-21:00"
                      wed:
                        type: string
                        example: "12:00-21:00"
                      thu:
                        type: string
                        example: "12:00-21:00"
                      fri:
                        type: string
                        example: "12:00-21:00"
                      sat:
                        type: string
                        example: "12:00-21:00"
                      sun:
                        type: string
                        example: "12:00-21:00"
        401:
          description: Unauthorized - Missing or invalid JWT cookie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Availability not set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/extensions/set-availability:
    post:
      tags:
        - Extensions
      summary: Set weekly availability
      description: Set user's availability for each day of the week using time ranges like "12:00-21:00".
      security:
        - jwtCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mon:
                  type: string
                  example: "12:00-21:00"
                tue:
                  type: string
                  example: "12:00-21:00"
                wed:
                  type: string
                  example: "12:00-21:00"
                thu:
                  type: string
                  example: "12:00-21:00"
                fri:
                  type: string
                  example: "12:00-21:00"
                sat:
                  type: string
                  example: "12:00-21:00"
                sun:
                  type: string
                  example: "12:00-21:00"
      responses:
        200:
          description: Availability set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Availability set successfully"
        400:
          description: Missing availability data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/extensions/meeting-lookup:
    post:
      tags:
        - Extensions
      summary: Trigger meeting lookup and send meeting requests
      description: |
        Uses profile tag matching and user availability to send meeting requests.
        Requires JWT in Authorization header.
      security:
        - jwtCookie: []
      requestBody:
        description: requires last location
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - lastLocation
              properties:
                lastLocation:
                  type: object
                  required:
                    - lat
                    - lon
                  properties:
                    lat:
                      type: number
                      format: float
                      description: Latitude of the responder's last known location (−90 to 90)
                      example: 48.8566
                    lon:
                      type: number
                      format: float
                      description: Longitude of the responder's last known location (−180 to 180)
                      example: 2.3522
                matchingTags:
                  type: array
                  items:
                    type: string
                  description: Optional list of tagIds to match against other users' profiles
                  example: ["661bb62a97c7a8efc3a3b02f", "661bb62a97c7a8efc3a3b100"]
      responses:
        200:
          description: Result of the meeting lookup
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Meeting requests sent successfully"
                  availableUserCounter:
                    type: integer
                    example: 3
                  error:
                    type: string
                    nullable: true
        400:
         description: Either no lastLocation has been passed to the function or the user doesn't have a required tag attached to his profile
         content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
   
  /api/v1/extensions/get-instant-meeting-requests:
    get:
      tags:
        - Extensions
      summary: Get pending instant meeting requests
      description: |
        Retrieves pending instant meeting requests sent **to** or **by** the authenticated user.
        Requires a valid `jwt-meshlycore` cookie.
      security:
        - jwtCookie: []
      responses:
        '200':
          description: A list of instant meeting requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  receivedRequests:
                    type: array
                    items:
                      type: object
                      properties:
                        requestId:
                          type: string
                          format: uuid
                        otherUsername:
                          type: string
                        receiver:
                          type: string
                          format: uuid
                        sender:
                          type: string
                          format: uuid
                        comment:
                          type: string
                        timestamp:
                          type: string
                          format: date-time
                  sentRequests:
                    type: array
                    items:
                      type: object
                      properties:
                        otherUsername:
                          type: string
                        requestId:
                          type: string
                          format: uuid
                        receiver:
                          type: string
                          format: uuid
                        sender:
                          type: string
                          format: uuid
                        comment:
                          type: string
                        timestamp:
                          type: string
                          format: date-time
                  activeRequest:
                    type: object
                    properties:
                      requestId:
                        type: string
                        format: uuid
                      receiver:
                        type: string
                        format: uuid
                      sender:
                        type: string
                        format: uuid
                      otherUsername:
                        type: string
                      comment:
                        type: string
                      timestamp:
                        type: string
                        format: date-time
                      location:
                       $ref: '#/components/schemas/LocationDto'
                        
        '404':
          description: No instant meeting requests found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                not-found:
                  value:
                    success: false
                    error: "No instant meeting requests found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v1/extensions/accept-instant-meeting-request:
    post:
      tags:
        - Extensions
      summary: Accept an instant meeting request
      description: |
        Accepts a pending instant meeting request,
        computes a meeting point, and notifies the requester.
      security:
        - jwtCookie: []
      requestBody:
        description: Request ID of the instant meet request and the responder’s current location
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - requestId
                - location
              properties:
                requestId:
                  type: string
                  description: friendRequest ID
                  example: "67f2ddf33d708e12caf2e143"
                location:
                  type: object
                  required:
                    - lat
                    - lon
                  properties:
                    lat:
                      type: number
                      format: float
                      description: Latitude of the responder's last known location (−90 to 90)
                      example: 48.8566
                    lon:
                      type: number
                      format: float
                      description: Longitude of the responder's last known location (−180 to 180)
                      example: 2.3522
      responses:
        '200':
          description: Instant meet request accepted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Instant meet request accepted"
                  requestId:
                    type: string
                    example: "67f2ddf33d708e12caf2e143"
                  meetingLocation:
                    type: object
                    description: The calculated meeting location (format depends on your implementation)
                    example: { "lat": 48.8584, "lng": 2.2945 }
        '400':
          description: Missing required fields or no meeting point found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Request or sender location not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '406':
          description: An instant meeting is already taking place
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/extensions/reject-instant-meeting-request:
    post:
      tags:
        - Extensions
      summary: Reject an instant meeting request
      description: |
        Rejects a pending instant meeting request by marking it as not accepted.
        If an identical non-pending, non-accepted instant meet request already exists,
        the operation is silently skipped.
      security:
        - jwtCookie: []
      requestBody:
        description: Request ID of the instant meet request to reject
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - requestId
              properties:
                requestId:
                  type: string
                  description: FriendRequest ID to reject
                  example: "67f2ddf33d708e12caf2e143"
      responses:
        '204':
          description: Instant meet request rejected or already handled
        '400':
          description: Missing required fields or invalid instant meet request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Meeting request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v1/extensions/end-instant-meeting:
    post:
      tags:
        - Extensions
      summary: End an active instant meeting
      description: |
        Ends an active instant meeting for the authenticated user, clearing their status.
        Requires a valid `jwt-meshlycore` cookie.
      security:
        - jwtCookie: []
      responses:
        '204':
          description: Instant meeting ended successfully
        '400':
          description: User is not in an active instant meeting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                no-active-meet:
                  value:
                    success: false
                    error: "User is not in an active instant meeting"
        '404':
          description: Instant meeting request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                not-found:
                  value:
                    success: false
                    error: "Instant meeting request not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/extensions/send-meeting-request:
    post:
      tags:
        - Extensions
      summary: Send a meeting request
      description: |
        Sends a meeting request from the authenticated user to another user at a specified time and location.
        Requires a valid `jwt-meshlycore` cookie.
      security:
        - jwtCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - datetime
                - lat
                - lon
              properties:
                username:
                  type: string
                  description: The target user's username
                  example: "john_doe"
                datetime:
                  type: string
                  format: date-time
                  description: ISO 8601 timestamp for the meeting (UTC)
                  example: "2025-06-10T15:00:00Z"
                lat:
                  type: number
                  description: Latitude of the meeting location (−90 to 90)
                  example: 48.8566
                lon:
                  type: number
                  description: Longitude of the meeting location (−180 to 180)
                  example: 2.3522
      responses:
        204:
          description: Meeting request sent successfully (no content)
        400:
          description: Missing or invalid fields (username, datetime, lat, lon)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        404:
          description: User not found or invalid username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        418:
          description: Can't send a meeting request to yourself
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/extensions/respond-to-meeting-request:
    post:
      tags:
        - Extensions
      summary: Respond to a meeting request
      description: |
        Accepts or rejects a pending meeting request and optionally provides suggested location (lat/lon) and/or time.
        Suggestions must be provided as a JSON‐encoded string.
        Requires a valid 'jwt-meshlycore' cookie.
      security:
        - jwtCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - requestId
                - result
              properties:
                requestId:
                  type: string
                  description: The ID of the FriendRequest to respond to
                  example: "67f2ddf33d708e12caf2e143"
                result:
                  type: string
                  description: Whether the request is accepted or rejected
                  enum:
                    - accepted
                    - rejected
                  example: "accepted"
                suggestions:
                  type: string
                  description: >
                    JSON‐encoded object with optional fields:
                      • lat (number)  
                      • lon (number)  
                      • time (ISO 8601 string)  
                    e.g. '{"lat":48.8584,"lon":2.2945,"time":"2025-06-09T15:00:00Z"}'
      responses:
        204:
          description: Meeting request response recorded successfully, no content
        400:
          description: Missing required fields or invalid suggestions format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Meeting request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


components:
  securitySchemes:
    jwtCookie:
      type: apiKey
      in: cookie
      name: jwt-meshlycore
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: "mail@meetables.com"
        username:
          type: string
          example: "user"
        password:
          type: string
          format: password
          example: "12345678"
        verification_code:
          type: string
          example: "887345"
      required:
        - password
      anyOf: # requires at least one of email, username
        - required: [email]
        - required: [username]
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true #! enum: [true]
        user:
          $ref: '#/components/schemas/UserDto' #! CHANGE USERDTO
    SignupRequest:
      type: object
      properties:
        email:
          type: string
          example: "mail@meetables.com"
        username:
          type: string
          example: "user"
        password:
          type: string
          format: password
          example: "12345678"
      required:
        - email
        - username
        - password
    SignupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/UserDto'
    VerifyBasicCredentialsRequest:
      type: object
      properties:
        email:
          type: string
          example: "mail@meetables.com"
        username:
          type: string
          example: "user"
        password:
          type: string
          format: password
          example: "12345678"
      required:
        - password
      anyOf: # requires at least one of email, username
        - required: [email]
        - required: [username]
    VerifyBasicCredentialsResponse2faEnabled:
      type: object
      properties:
        success:
          type: boolean
          example: true
        confirmation_required:
          type: boolean
          example: false #! enum: [true, false]
    VerifyBasicCredentialsResponse2faDisabled:
      type: object
      properties:
        success:
          type: boolean
          example: true
        confirmation_required:
          type: boolean
          example: false #! enum: [true, false]
    Setup2faResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        qrCodeUrl:
          type: string
          example: "otpauth://totp/Meetables?secret=JBSWY3DPEHPK3PXP&issuer=Meetables"
    ConfirmationRequestResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Email verified successfully"
    ResetPasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
          format: password
          example: "oldpassword123"
        newPassword:
          type: string
          format: password
          example: "newpassword123"
    ResetPasswordResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Password changed successfully"
    TestAuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/UserDto'

    ErrorResponse:
      type: object
      properties: #! success: false
        message:
          type: string
    UserDto:
      type: object
      properties:
        status:
          type: string
          example: "active"
        username:
          type: string
          example: "testuser3"
        email:
          type: string
          example: "testuser3@example.com"
        displayName:
          type: string
          example: "testuser3"
        profileDescription:
          type: string
          example: "just a bot"
        profileTags:
          type: array
          items:
            type: string
          example:
            - "64d5f28f4b8f2b7b4c1f2a7e"
            - "64d5f28f4b8f2b7b4c1f2a7f"
        ignoredUserIds:
          type: array
          items:
            type: string
          example:
            - "64d5f28f4b8f2b7b4c1f2a80"
            - "64d5f28f4b8f2b7b4c1f2a81"
        friendUserIds:
          type: array
          items:
            type: string
          example:
            - "64d5f28f4b8f2b7b4c1f2a82"
            - "6832e6f9b2e85233e9f62a82"
        lastLocation:
          $ref: '#/components/schemas/LocationDto'
    LocationDto:
      type: object
      properties:
        lat:
          type: number
          example: 48.12872785130619
        lng:
          type: number
          example: 11.59184340149795
    UsernameDto:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          example: "example_user_123"
    NotificationsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/NotificationDto'
    NotificationDto:
      type: object
      properties:
        _id:
          type: string
          example: "6832e6f9b2e85233e9f62aab"
        type:
          type: string
          example: "instant_meet_request"
          enum:
            - instant_meet_request
            - meet_request
            - instant_meet_result_accepted
            - instant_meet_result_rejected
            - friend_request
        pending:
          type: boolean
          example: true
        content:
          type: string
          example: "6832e6f9b2e85233e9f62aa2"
        timestamp:
          type: string
          format: date-time
          example: "2025-05-25T09:46:33.638Z"
    DiscoverUserSuggestionResponse:
      type: object
      required:
        - success
        - recommendations
      properties:
        success:
          type: boolean
          example: true
        recommendations:
          type: array
          items:
            type: object
            required:
              - username
              - score
            properties:
              username:
                type: string
                description: Username of the recommended user
                example: "alice123"
              score:
                type: number
                description: Weight or score of the recommendation
                example: 0.85
                minimum: 0
                maximum: 1
              timestamp:
                type: string
                format: date-time
                description: Timestamp of the recommendation
                example: "2023-10-01T12:00:00Z"
              type:
                type: object
                description: Flags to indicate "new" or "hot" status
                properties:
                  new:
                    type: boolean
                    example: true
                    description: User is freshly registered
                  hot:
                    type: boolean
                    example: true
                    description: High matching score
    ProfileMeResponse:
      type: object
      required:
        - success
        - user
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/UserDto'
    PublicProfileResponse:
      type: object
      required:
        - success
        - user
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/PublicProfileDto'
    RespondToFriendRequestRequest:
      type: object
      required:
        - username
        - status
      properties:
        username:
          type: string
          example: "friend_user"
        status:
          type: string
          enum:
            - accepted
            - rejected
    FriendRequestsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        friendRequests:
          type: array
          required:
            - isSender
            - involvedUserUsername
            - pending
            - comment
            - timestamp
          items:
            type: object
            properties:
              isSender:
                type: boolean
                example: true
              involvedUserUsername:
                type: string
                example: "friend_user"
              result:
                type: string
                enum: [ "rejected", "accepted" ]
              pending:
                type: boolean
                example: true
              comment:
                type: string
                example: "Friend request from friend_user"
              timestamp:
                type: string
                format: date-time
                example: "2023-10-01T12:00:00Z"
    OnboardUserRequest:
      type: object
      required:
        - displayName
        - profileTagIds
        - profileDescription
      properties:
        displayName:
          type: string
          example: "JaneDoe"
        profileTagIds:
          type: array
          items:
            type: string
          example: ["tagId1", "tagId2"]
        profileDescription:
          type: string
          example: "Hi, I'm Jane and I love hiking and building communities."
    UpdateProfileRequest:
      type: object
      required:
        - profileTagIds
        - profileDescription
      properties:
        profileTagIds:
          type: array
          items:
            type: string
          example: ["64d5f28f4b8f2b7b4c1f2a7e", "64d5f28f4b8f2b7b4c1f2a7f"]
          description: Array of profile tag IDs to update the user's profile tags
        profileDescription:
          type: string
          example: "Updated profile description with new interests and hobbies."
          description: New profile description for the user
    GetUserSuggestionsRequest:
      type: object
      required: 
        - max_suggestions
      properties: 
        max_suggestions:
          type: number
          example: 5
          minimum: 1
    TagResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
            required:
              - _id
              - name
              - category
              - icon
            properties:
              _id:
                type: string
                example: "60f7c8573e843b001c8e4b9a"
              name:
                type: string
                example: "Hiking"
              de_name:
                type: string
                example: "Wandern"
              category:
                type: string
                example: "Activity"
              icon:
                type: string
                example: "🏔️"
              superiorTagId:
                type: string
                example: "60f7c8573e843b001c8e4b91"
    DiscoverProfileResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/PublicProfileDto'
    PublicProfileDto:
      type: object
      required:
        - username
        - displayName
        - profileDescription
        - profileTags
      properties:
        username:
          type: string
          example: "johnDoe"
        displayName:
          type: string
          example: "John Doe"
        profileDescription:
          type: string
          example: "Just another social media enthusiast."
        profileTags:
          type: array
          items:
            type: string
          example:
            - "64d5f28f4b8f2b7b4c1f2a7e"
            - "64d5f28f4b8f2b7b4c1f2a7f"

  responses:
    LoginSuccess:
      description: Successful Login with JWT cookie set.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginResponse'
      headers:
        Set-Cookie:
          description: JWT authentication cookie.
          schema:
            type: string
          example: 'jwt-meshlycore=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9; Max-Age=1296000; HttpOnly; SameSite=Strict; Secure'
    SignupSuccess:
      description: Successful Signup with JWT cookie set.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignupResponse'
      headers:
        Set-Cookie:
          description: JWT authentication cookie.
          schema:
            type: string
          example: 'jwt-meshlycore=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9; Max-Age=1296000; HttpOnly; SameSite=Strict; Secure'
